
Woltomierz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000023a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a16  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000682  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048e  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000409  00000000  00000000  00001d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000216f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  7a:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <TWI_init>:

void BCD_ADC(uint16_t wynik, uint8_t *tab)
{
	tab[0] = wynik / 100;
	tab[1] = (wynik % 100) / 10;
	tab[2] = (wynik % 100) % 10;
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	80 b9       	out	0x00, r24	; 0
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	86 bf       	out	0x36, r24	; 54
  8a:	08 95       	ret

0000008c <TWI_start>:
  8c:	84 ea       	ldi	r24, 0xA4	; 164
  8e:	86 bf       	out	0x36, r24	; 54
  90:	06 b6       	in	r0, 0x36	; 54
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <TWI_start+0x4>
  96:	08 95       	ret

00000098 <TWI_stop>:
  98:	84 e9       	ldi	r24, 0x94	; 148
  9a:	86 bf       	out	0x36, r24	; 54
  9c:	06 b6       	in	r0, 0x36	; 54
  9e:	04 fc       	sbrc	r0, 4
  a0:	fd cf       	rjmp	.-6      	; 0x9c <TWI_stop+0x4>
  a2:	08 95       	ret

000000a4 <TWI_write>:
  a4:	83 b9       	out	0x03, r24	; 3
  a6:	84 ec       	ldi	r24, 0xC4	; 196
  a8:	86 bf       	out	0x36, r24	; 54
  aa:	06 b6       	in	r0, 0x36	; 54
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <TWI_write+0x6>
  b0:	08 95       	ret

000000b2 <LCD_write>:
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	d8 2f       	mov	r29, r24
  ba:	c6 2f       	mov	r28, r22
  bc:	18 2f       	mov	r17, r24
  be:	10 7f       	andi	r17, 0xF0	; 240
  c0:	16 2b       	or	r17, r22
  c2:	81 2f       	mov	r24, r17
  c4:	8c 60       	ori	r24, 0x0C	; 12
  c6:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_write>
  ca:	81 2f       	mov	r24, r17
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_write>
  d4:	20 e1       	ldi	r18, 0x10	; 16
  d6:	d2 9f       	mul	r29, r18
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	c8 2b       	or	r28, r24
  de:	8c 2f       	mov	r24, r28
  e0:	8c 60       	ori	r24, 0x0C	; 12
  e2:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_write>
  e6:	8c 2f       	mov	r24, r28
  e8:	8b 7f       	andi	r24, 0xFB	; 251
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_write>
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	08 95       	ret

000000f8 <LCD_init>:
  f8:	0e 94 46 00 	call	0x8c	; 0x8c <TWI_start>
  fc:	8e e4       	ldi	r24, 0x4E	; 78
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_write>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	83 e3       	ldi	r24, 0x33	; 51
 106:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	82 e3       	ldi	r24, 0x32	; 50
 10e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	88 e2       	ldi	r24, 0x28	; 40
 116:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write>
 132:	0e 94 4c 00 	call	0x98	; 0x98 <TWI_stop>
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	9f e1       	ldi	r25, 0x1F	; 31
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_init+0x42>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_init+0x48>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <LCD_text>:
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	8c 01       	movw	r16, r24
 14c:	c6 2f       	mov	r28, r22
 14e:	0e 94 46 00 	call	0x8c	; 0x8c <TWI_start>
 152:	8e e4       	ldi	r24, 0x4E	; 78
 154:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_write>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write>
 160:	f8 01       	movw	r30, r16
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	59 f0       	breq	.+22     	; 0x17e <LCD_text+0x3a>
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	cf 5f       	subi	r28, 0xFF	; 255
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write>
 172:	f8 01       	movw	r30, r16
 174:	ec 0f       	add	r30, r28
 176:	f1 1d       	adc	r31, r1
 178:	80 81       	ld	r24, Z
 17a:	81 11       	cpse	r24, r1
 17c:	f6 cf       	rjmp	.-20     	; 0x16a <LCD_text+0x26>
 17e:	0e 94 4c 00 	call	0x98	; 0x98 <TWI_stop>
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <ADC_init>:
 18a:	81 ec       	ldi	r24, 0xC1	; 193
 18c:	87 b9       	out	0x07, r24	; 7
 18e:	84 e8       	ldi	r24, 0x84	; 132
 190:	86 b9       	out	0x06, r24	; 6
 192:	08 95       	ret

00000194 <LCD_V_disp>:
}

void LCD_V_disp(uint16_t wynik, uint8_t adres)
{
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	16 2f       	mov	r17, r22
	uint8_t wart=0;
	wart = wynik / 16;
 1a0:	7c 01       	movw	r14, r24
 1a2:	f6 94       	lsr	r15
 1a4:	e7 94       	ror	r14
 1a6:	f6 94       	lsr	r15
 1a8:	e7 94       	ror	r14
 1aa:	f6 94       	lsr	r15
 1ac:	e7 94       	ror	r14
 1ae:	f6 94       	lsr	r15
 1b0:	e7 94       	ror	r14
 1b2:	de 2d       	mov	r29, r14
 1b4:	c6 2f       	mov	r28, r22
	for(uint8_t i=0; i<=wart; i++)
	{
		LCD_text("0",adres);
 1b6:	6c 2f       	mov	r22, r28
 1b8:	80 e6       	ldi	r24, 0x60	; 96
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_text>
		adres++;
 1c0:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_V_disp(uint16_t wynik, uint8_t adres)
{
	uint8_t wart=0;
	wart = wynik / 16;
	for(uint8_t i=0; i<=wart; i++)
 1c2:	8c 2f       	mov	r24, r28
 1c4:	81 1b       	sub	r24, r17
 1c6:	d8 17       	cp	r29, r24
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <LCD_V_disp+0x22>
	{
		LCD_text("0",adres);
		adres++;
	}
	for(uint8_t i=wart; i<=16; i++)
 1ca:	d1 31       	cpi	r29, 0x11	; 17
 1cc:	58 f4       	brcc	.+22     	; 0x1e4 <LCD_V_disp+0x50>
 1ce:	dc 2f       	mov	r29, r28
 1d0:	de 19       	sub	r29, r14
 1d2:	df 5e       	subi	r29, 0xEF	; 239
	{
		LCD_text(".",adres);
 1d4:	6c 2f       	mov	r22, r28
 1d6:	82 e6       	ldi	r24, 0x62	; 98
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_text>
		adres++;
 1de:	cf 5f       	subi	r28, 0xFF	; 255
	for(uint8_t i=0; i<=wart; i++)
	{
		LCD_text("0",adres);
		adres++;
	}
	for(uint8_t i=wart; i<=16; i++)
 1e0:	dc 13       	cpse	r29, r28
 1e2:	f8 cf       	rjmp	.-16     	; 0x1d4 <LCD_V_disp+0x40>
	{
		LCD_text(".",adres);
		adres++;
	}
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <main>:

int main(void)
{
    TWI_init();
 1f0:	0e 94 41 00 	call	0x82	; 0x82 <TWI_init>
    LCD_init();
 1f4:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_init>
	uint16_t wynik;
	uint8_t LCD[3];
	char value[] = "1,23V";
	ADC_init();
 1f8:	0e 94 c5 00 	call	0x18a	; 0x18a <ADC_init>
		//////adres++;
	//////}

    while (1) 
    {	
		ADMUX = (1<<REFS1)|(1<<REFS0)|(1<<MUX0);
 1fc:	d1 ec       	ldi	r29, 0xC1	; 193
		//value[0] = LCD[0]+'0';
		//value[2] = LCD[1]+'0';
		//value[3] = LCD[2]+'0';
		//LCD_text(value,0x80);
		LCD_V_disp(wynik,0x80);
		ADMUX = (1<<REFS1)|(1<<REFS0)|(0<<MUX0)|(1<<MUX1);
 1fe:	c2 ec       	ldi	r28, 0xC2	; 194
		//////adres++;
	//////}

    while (1) 
    {	
		ADMUX = (1<<REFS1)|(1<<REFS0)|(1<<MUX0);
 200:	d7 b9       	out	0x07, r29	; 7
		ADCSRA |= (1<<ADSC);
 202:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<<ADSC));
 204:	36 99       	sbic	0x06, 6	; 6
 206:	fe cf       	rjmp	.-4      	; 0x204 <main+0x14>
		wynik = ADC;
 208:	84 b1       	in	r24, 0x04	; 4
 20a:	95 b1       	in	r25, 0x05	; 5
		//BCD_ADC(wynik, LCD);
		//value[0] = LCD[0]+'0';
		//value[2] = LCD[1]+'0';
		//value[3] = LCD[2]+'0';
		//LCD_text(value,0x80);
		LCD_V_disp(wynik,0x80);
 20c:	60 e8       	ldi	r22, 0x80	; 128
 20e:	96 95       	lsr	r25
 210:	87 95       	ror	r24
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_V_disp>
		ADMUX = (1<<REFS1)|(1<<REFS0)|(0<<MUX0)|(1<<MUX1);
 21a:	c7 b9       	out	0x07, r28	; 7
		ADCSRA |= (1<<ADSC);
 21c:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<<ADSC));
 21e:	36 99       	sbic	0x06, 6	; 6
 220:	fe cf       	rjmp	.-4      	; 0x21e <main+0x2e>
		wynik = ADC;
 222:	84 b1       	in	r24, 0x04	; 4
 224:	95 b1       	in	r25, 0x05	; 5
		//BCD_ADC(wynik, LCD);
		//value[0] = LCD[0]+'0';
		//value[2] = LCD[1]+'0';
		//value[3] = LCD[2]+'0';
		//LCD_text(value,0xc0);
		LCD_V_disp(wynik,0xc0);
 226:	60 ec       	ldi	r22, 0xC0	; 192
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_V_disp>
    }
 234:	e5 cf       	rjmp	.-54     	; 0x200 <main+0x10>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
